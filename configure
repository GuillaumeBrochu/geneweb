#!/bin/bash

PROG_NAME=${0##*/}

# Output for the generated file
MAKEFILE=tools/Makefile.config

# Separate compilation
BUILD_DIR="_build"

help() {
  cat << EOF
$PROG_NAME generates $MAKEFILE.
usage: $PROG_NAME [<options>]

options:
  -h|--help
      show this help
  --api
      build the API
  -bd|--build-dir
      separate directory for build (default: $BUILD_DIR)
  -d|--debug
      add debugging symbols to the build command
  -i|--interactive
      run $PROG_NAME interactively
  -nw|--no-warn-error
      do not treat warning as error
  -r|--redis_path
      path for the redis library (necessary if building the API)
  -s|--static
      statically link libraries
EOF
}

# Parse options
# Options for Makefile
OCAMLFIND=false
OCAMLC=
OCAMLOPT=
OCAMLFLAGS="-safe-string"
NATIVE=false

CAMLP5F=
CAMLP5D=
CURL=
LABLGTK2D=+lablgtk2
LABLTKD=+labltk
LREDIS=
MYSQL=
OREDIS=
RE=

WARN="-warn-error A"
STRIP=true
RM=
EXE=
LINKSTATIC_opt=
LINKSTATIC_out=
OS_TYPE=

# Options for configure
STATIC=false
API=false
DEBUG=
INTERACTIVE=false
TRY_NATIVE=true
TRY_OCAMLFIND=true

while [[ $# -ne 0 ]]; do
  case $1 in
    -h|--help)
      help; exit ;;
    --api)
      API=true ;;
    -bd|--build-dir)
      BUILD_DIR="$2";
      shift ;;
    -d|--debug)
      DEBUG="-g -annot" ;;
    -i|--interactive)
      INTERACTIVE=true ;;
    -nw|--no-warn-error)
      WARN= ;;
    -r|--redis_path)
      LREDIS="$2";
      shift ;;
    -s|--static)
      STATIC=true ;;
    *)
      echo -e "\\x1b[33m[WARNING]\\x1b[0m Option $1 unknown and ignored.";;
  esac
  [[ $# -gt 0 ]] && shift
done

# Functions that print the checked information

# Length of line for print_check_*
LINE_WIDTH=65

print_check_gen() {
  local n=$(( $LINE_WIDTH-${#2}-8 ))
  printf "\\x1b[36m[INFO]\\x1b[0m %s " "$2"
  printf ".%.0s" $(eval "echo {1.."$(($n))"}")
  printf " \\x1b[%sm%s\\x1b[0m" "$1" "$3"
  echo
}

print_check_ok() {
  print_check_gen "32" "$1" "${2:-OK}"
}

print_check_warn() {
  print_check_gen "33" "$1" "$2"
}

print_check_err() {
  print_check_gen "31" "$1" "ERROR"
  echo "$2"
  echo "Configuration script failed!"
  exit 1
}

# Helpers functions to compare version numbers

cmpversion() {
# 0: A = B, 1: A < B, 2: A > B, 3: err
  [ -n "$1" ] && [ -n "$2" ] && [ -z "$4" ] || return 3
  [ -z "$3" ] || [ "$3" = "V" ] || return 3
  [ "$3" != "V" ] || local IFS=.-
  local A=($1) B=($2)
  local i n=${#A[@]} a b
  [ ${#B[@]} -ge $n ] || n=${#B[@]}
  for (( i=0; i<n; i++ )); do
    a="${A[$i]}"; b="${B[$i]}"
    if [[ "$a" =~ ^[0-9] ]]; then
      [[ "$b" =~ ^[0-9] ]] || return 1
      if [ "$3" = "V" ]; then
        [ "$a" -lt "$b" ] && return 1
        [ "$a" -gt "$b" ] && return 2
      else
        cmpversion "$a" "$b" "V" || return $?
      fi
    else
        [[ "$b" =~ ^[0-9] ]] && return 2
        [[ "$a" < "$b" ]] && return 1
        [[ "$a" > "$b" ]] && return 2
    fi
  done
  [ ${#A[@]} -le $n ] || return 2
  [ ${#B[@]} -le $n ] || return 1
  return 0
}

testversion() {
# 0: true, 1: false, 2: err
  [ -n "$1" ] && [ -n "$2" ] && [ -n "$3" ] && [ -z "$4" ] || return 2
  cmpversion "$1" "$3"; local c=$?
  [ $c -lt 3 ] || return 2
  case $2 in
  "<"|"-lt") return $(($c != 1));;
  "<="|"-le") return $(($c == 2));;
  ">"|"-gt") return $(($c != 2));;
  ">="|"-ge") return $(($c == 1));;
  "="|"=="|"-eq") return $(($c != 0));;
  "!="|"-ne") return $(($c == 0));;
  esac
  return 2
}

# Functions to check the environment

check_os() {
  OS_TYPE=`uname -s`
  if [[ $OS_TYPE == "Darwin" ]] || [[ $OS_TYPE == "Linux" ]] ; then
    print_check_ok "Checking OS type" "UNIX"
    CAMLP5F+=" -D UNIX"
    EXE=
    RM="/bin/rm -f"
    STRIP=strip
  else
    print_check_ok "Checking OS type" "WINDOWS"
    OS_TYPE="Win"
    CAMLP5F+=" -D WINDOWS"
    EXE=".exe"
    RM="rm -f"
    STRIP=true
  fi
}

check_make() {
  if ! make -v >/dev/null 2>&1; then
    print_check_err "Checking make" "\
      make needed."
  else
    local MAKE_MIN_VER="GNU Make 3.81"
    local MAKE_VER=`make -v|head -n 1`
    if testversion "$MAKE_VER" ">=" "$MAKE_MIN_VER"; then
      print_check_ok \
        "Checking make version $MAKE_VER >= $MAKE_MIN_VER"
    else
      print_check_warn \
        "Checking make version $MAKE_VER" \
        "$MAKE_MIN_VER or compatible needed."
    fi
  fi
}

check_ocaml() {
# depends on check_ocamlfind
  if $OCAMLFIND; then
    OCAMLC="ocamlfind ocamlc"
    OCAMLOPT="ocamlfind ocamlopt"
  else
    OCAMLC=ocamlc
    OCAMLOPT=ocamlopt
  fi
  if $OCAMLC -v >/dev/null 2>&1; then
    print_check_ok "Checking OCaml compiler ($OCAMLC)"
  else
    print_check_err "Checking OCaml compiler ($OCAMLC)" \
        "You need the command ocamlc accessible in the path!"
  fi
  if $TRY_NATIVE && $OCAMLOPT -v >/dev/null 2>&1; then
    print_check_ok "Checking OCaml native compiler ($OCAMLOPT)"
    NATIVE=true
  elif $TRY_NATIVE; then
    print_check_warn "Checking OCaml native compiler ($OCAMLOPT)" "NOT FOUND"
  else
    print_check_ok "Checking OCaml native compiler" "SKIPPED"
  fi
}

check_optimized_ocaml() {
# depends on check_ocamlfind and check_ocaml
  if ! $OCAMLFIND; then
    local TRYOCAMLC=ocamlc.opt
    local TRYOCAMLOPT=ocamlopt.opt
    if $TRYOCAMLC -v >/dev/null 2>&1; then
      print_check_ok "Checking OCaml optimized compiler ($TRYOCAMLC)"
      OCAMLC=$TRYOCAMLC
    else
      print_check_warn "Checking OCaml optimized compiler ($TRYOCAMLC)" "NOT FOUND"
    fi
    if $TRY_NATIVE && $TRYOCAMLOPT -v >/dev/null 2>&1; then
      print_check_ok "Checking OCaml optimized native compiler ($TRYOCAMLOPT)"
      OCAMLOPT=$TRYOCAMLOPT
      NATIVE=true
    elif $TRY_NATIVE; then
      print_check_warn "Checking OCaml optimized native compiler ($TRYOCAMLOPT)" "NOT FOUND"
    else
      print_check_ok "Checking OCaml optimized native compiler" "SKIPPED"
    fi
  else
    print_check_ok "Check OCaml optimized compilers" "SKIPPED"
  fi
}

check_ocaml_version() {
# depends on check_ocaml and check_optimized_ocaml
  local OCAML_MIN_VER="4.02"
  local OCAML_VER="`$OCAMLC -version`"
  if testversion "$OCAML_VER" ">=" "$OCAML_MIN_VER"; then
    print_check_ok \
      "Checking OCaml compiler version $OCAML_VER >= $OCAML_MIN_VER"
  else
    print_check_err "Checking OCaml compiler version $OCAML_VER" \
        "OCaml version $OCAML_MIN_VER or newer needed."
  fi
  if $NATIVE; then
    OCAML_VER="`$OCAMLOPT -version`"
    if testversion "$OCAML_VER" ">=" "$OCAML_MIN_VER"; then
      print_check_ok \
        "Checking OCaml native compiler version $OCAML_VER >= $OCAML_MIN_VER"
    else
      print_check_warn "Checking Ocaml compiler version $OCAML_VER" \
          "OCaml version $OCAML_MIN_VER or newer needed."
      NATIVE=false
    fi
  fi
}

check_camlp5() {
  if camlp5 -v >/dev/null 2>&1; then
    print_check_ok "Checking Camlp5"
    CAMLP5D=`camlp5 -where`
  else
    print_check_err "Checking Camlp5" \
        "You need the command camlp5 accessible in the path!"
  fi
}

check_ocamlfind() {
  if $TRY_OCAMLFIND && ocamlfind printconf >/dev/null 2>&1; then
    print_check_ok "Checking ocamlfind" "FOUND"
    OCAMLFIND=true
    OCAMLFLAGS+=" -linkpkg"
  elif $API; then
    print_check_err "Checking ocamlfind" \
        "You need the command ocamlfind accessible in the path!"
  elif $TRY_OCAMLFIND; then
    print_check_warn "Checking ocamlfind" "NOT FOUND"
  else
    print_check_ok "Checking ocamlfind" "SKIPPED"
  fi
}

check_api() {
  if $API; then
    CAMLP5F+=" -DAPI"
  fi
}

check_static() {
  if $STATIC; then
    LINKSTATIC_out+=" -ccopt -static -custom"
    LINKSTATIC_opt+=" -ccopt -static"
  fi
}

check_lablgtk2() {
  if $OCAMLFIND; then
    if ocamlfind query lablgtk2 >/dev/null 2>&1; then
      print_check_ok "Checking OCaml lablgtk2"
      LABLGTK2D=`ocamlfind query lablgtk2`
    else
      print_check_warn "Checking OCaml lablgtk2" "NOT FOUND"
    fi
  else
    print_check_warn "Checking OCaml lablgtk2" "SKIPPED"
  fi
}

check_labltk() {
  if $OCAMLFIND; then
    if ocamlfind query labltk >/dev/null 2>&1; then
      print_check_ok "Checking OCaml labltk"
      LABLTKD=`ocamlfind query labltk`
    else
      print_check_warn "Checking OCaml labltk" "NOT FOUND"
    fi
  else
    print_check_warn "Checking OCaml labltk" "SKIPPED"
  fi
}

check_mysql() {
  if $API; then
    if ocamlfind query mysql >/dev/null 2>&1; then
      print_check_ok "Checking OCaml mysql"
      MYSQL=`ocamlfind query mysql`
    else
      print_check_err "Checking OCaml mysql" \
          "You need the OCaml dependency mysql!"
    fi
  fi
}

check_curl() {
  if $API; then
    if ocamlfind query curl >/dev/null 2>&1; then
      print_check_ok "Checking OCaml curl"
      CURL=`ocamlfind query curl`
    else
      print_check_err "Checking OCaml curl" \
          "You need the OCaml dependency curl!"
    fi
  fi
}

absdirpath() {
  (
    cd $1 || return 1
    echo "$PWD"
  ) 2> /dev/null
}

check_redis_path() {
  LREDIS=$(absdirpath $LREDIS) || return 1
  LREDIS="${LREDIS%/}"
  if [[ -e "${LREDIS}/_build/src/redis.cmxs" ]]; then
    LREDIS="${LREDIS}/_build/src"
    return 0
  elif [[ -e "${LREDIS}/src/redis.cmxs" ]]; then
    LREDIS="${LREDIS}/src"
    return 0
  elif [[ -e "${LREDIS}/redis.cmxs" ]]; then
    return 0
  fi
  return 1
}

check_redis() {
  if $API; then
    if ! ocamlfind query redis >/dev/null 2>&1; then
      print_check_err "Checking OCaml redis" \
          "You need the OCaml dependency redis!"
    elif ! check_redis_path; then
      print_check_err "Checking OCaml redis" \
          "You need to provide a valid redis path!"
    fi
    print_check_ok "Checking OCaml redis"
    OREDIS=`ocamlfind query redis`
  fi
}

check_re() {
  if $API; then
    if ocamlfind query re >/dev/null 2>&1; then
      print_check_ok "Checking OCaml re"
      RE=`ocamlfind query re`
    else
      print_check_err "Checking OCaml re" \
          "You need the OCaml dependency re!"
    fi
  fi
}

check_environment() {
  check_os
  check_make
  check_ocamlfind
  check_ocaml
  check_optimized_ocaml
  check_ocaml_version
  check_camlp5
  check_lablgtk2
#  check_labltk
  check_api
  check_static
  check_mysql
  check_curl
  check_redis
  check_re
}

# Functions to print Makefile.config.

# Print common options, should be called first.
print_common_header() {
   echo "# This file is generated by $0."
   echo
   echo "ifeq (\$(ROOT),'')"
   echo "  \$(error Variable ROOT must be defined in each Makefile before \
it is included.)"
   echo "endif"
   echo
   echo "# For echo and colors."
   echo "SHELL:=/bin/bash"
   echo
   echo "# Formatting and colors."
   echo "GREEN:=\"\\\\x1b[32m\""
   echo "YELLOW:=\"\\\\x1b[33m\""
   echo "RED:=\"\\\\x1b[31m\""
   echo "MAGENTA:=\"\\\\x1b[35m\""
   echo "CYAN:=\"\\\\x1b[36m\""
   echo "BOLD:=\"\\\\x1b[1m\""
   echo "CLEAR:=\"\\\\x1b[0m\""
   echo
   echo "# A newline character to generate multiline recipes"
   echo "define \\n"
   echo
   echo
   echo "endef"
   echo
   echo "# Variables for packagers."
   echo "PREFIX=/usr"
   echo "LANGDIR=\$(PREFIX)/share/geneweb"
   echo "MANDIR=\$(PREFIX)/man/man1"
   echo "DESTDIR=distribution"
   echo "MANPAGES=ged2gwb.1 gwb2ged.1 gwc.1 gwc2.1 gwu.1 gwd.1 consang.1 \
gwsetup.1"
   echo
   echo "# Build directory."
   echo "BUILD_DIR=\$(ROOT)/${BUILD_DIR}"
   echo
   echo "OS_TYPE=${OS_TYPE}"
}

print_tools() {
   echo
   echo "CAMLP5_COMM=\$(ROOT)/tools/camlp5_comm.sh"
   echo "STRIP=${STRIP}"
   echo "RM=${RM}"
   echo "EXE=${EXE}"
   echo "TEST_DIR=[ \"\$(abspath \$<)\" = \"\$(abspath ./\$(notdir \$<))\" ] || \
{ printf \"\$(RED)Cannot build target '\$@'\"; \
printf \"Please run 'make' in directory '\$(dir \$<)' first\$(CLEAR)\"; \
exit 1; }"
   echo "extension=\$(subst .,,\$(suffix \$1))"
   echo "EXT=\$(call extension,\$@)"
   echo
   echo ".PHONY: always"
   echo "always:"
   echo
}

print_compiler() {
   echo
   echo "# File extensions."
   echo "LIB_opt_EXT := .cmxa"
   echo "LIB_out_EXT := .cma"
   echo "OBJ_opt_EXT := .cmx"
   echo "OBJ_out_EXT := .cmo"
   echo
   echo "# Compiler options."
   echo "OCAMLI=\$(foreach d,\$(INCDIRS),-I \$d)"
   echo "OCAMLFLAGS=${OCAMLFLAGS} ${WARN} ${DEBUG}"
   echo "OCAMLC=${OCAMLC} \$(OCAMLFLAGS)"
   echo "OCAMLOPT=${OCAMLOPT} \$(OCAMLFLAGS)"
   echo "OCAML_opt_LINK=\$(OCAMLOPT) \$(LINKSTATIC_opt)"
   echo "OCAML_out_LINK=\$(OCAMLC) \$(LINKSTATIC_out)"
   echo "CAMLP5F=${CAMLP5F}"
   echo "LINKSTATIC_opt=${LINKSTATIC_opt}"
   echo "LINKSTATIC_out=${LINKSTATIC_out}"
   echo
   echo "# Compiler dependencies."
   echo "CAMLP5D=${CAMLP5D}"
   echo "LABLGTK2D=${LABLGTK2D}"
   echo "LABLTKD=${LABLTKD}"
   if $API; then
     echo "MYSQL=${MYSQL}"
     echo "OCURL=${CURL}"
     echo "OREDIS=${OREDIS}"
     echo "RE=${RE}"
     echo "LREDIS=${LREDIS}"
     echo "WITH_API=y"
   fi
}

print_common_target() {
   echo
   echo "# Target 'all' is defined here."
   echo
   echo ".SUFFIXES:"
   echo "MAKEFLAGS += --no-builtin-rules"
   echo ".PHONY: all clean clean-comp clean-depend clean-exe clean-tmp depend everything everything-opt everything-out opt out"
   echo
   if $NATIVE; then
     echo ".DEFAULT_GOAL := opt"
   else
     echo ".DEFAULT_GOAL := out"
   fi
   echo "DEPEND_DEPEND_NAMES := pa_lock.cmo pa_html.cmo q_codes.cmo"
   echo "DEPEND_DEPEND := \$(addprefix \$(ROOT)/src/,\$(DEPEND_DEPEND_NAMES))"
   echo
   echo "# Targets 'opt' and 'out' are defined here if not in the root Makefile."
   echo "ifneq (\$(ROOT),.)"
   echo
   echo "ifeq (\$(ALL_OBJS)\$(ALL_EXE),)"
   echo "  \$(error Variables ALL_OBJS and/or ALL_EXE must be defined before include)"
   echo "endif"
   echo
   echo "all: out"
   echo "everything: all everything-out"
   if $NATIVE; then
     echo "all: opt"
     echo "everything: everything-opt"
   fi
   echo
   echo "everything-opt: \$(EVERYTHING_OBJS:=.cmx) \$(EVERYTHING_EXE:=.opt)"
   echo "everything-out: \$(EVERYTHING_OBJS:=.cmo) \$(EVERYTHING_EXE:=.out)"
   echo
   echo "opt: \$(ALL_OBJS:=.cmx) \$(ALL_EXE:=.opt)"
   echo "out: \$(ALL_OBJS:=.cmo) \$(ALL_EXE:=.out)"
   echo
   echo "out: STRIP := @\\#"
   echo
   echo "opt out:"
   echo "	\$(foreach EXE,\$(ALL_EXE),ln -fs \$(EXE).\$@ \$(EXE) \$(\\n))"
   echo "	\$(if \$(ALL_EXE),\$(STRIP) \$(ALL_EXE))"
   echo
   echo "%.opt:"
   echo "	\$(OCAML_opt_LINK) \$(OCAMLI) \$(LIBS:=\$(LIB_opt_EXT)) \$(LINKFLAGS) \$^ -o \$@"
   echo "%.out:"
   echo "	\$(OCAML_out_LINK) \$(OCAMLI) \$(LIBS:=\$(LIB_out_EXT)) \$(LINKFLAGS) \$^ -o \$@"
   echo
   echo "depend: \$(DEPEND_DEPEND)"
   echo "	\$(ROOT)/tools/camlp5_depend.sh \$(CAMLP5F) \$(OCAMLI) -- \$(wildcard *.ml *.mli) > .depend"
   echo
   echo ".depend:"
   echo "	@if [ ! -e \$@ ]; then \$(MAKE) -o \$@ depend; fi"
   echo
   echo ".objs: .depend \$(INCDIRS:=/.depend)"
   echo "	echo \"# Generated by make\" > \$@"
   echo "	\$(ROOT)/tools/transitive_depend.sh \$(OCAMLI) -filter '*.cmx' -noext -varname '%s_DEP_OBJS' \$(ALL_EXE) \$(EVERYTHING_EXE) >> \$@"
   echo "	\$(foreach exe,\$(ALL_EXE) \$(EVERYTHING_EXE),printf \"\$(exe)_OBJS := \\"
   echo "	  \$(\$(exe)_PREPEND_OBJS) \\\$\$(\$(exe)_DEP_OBJS) \$(\$(exe)_APPEND_OBJS) \$(exe)\\"
   echo "	  \\n\$(exe).opt: \\\$\$(\$(exe)_OBJS:=.cmx)\\"
   echo "	  \\n\$(exe).out: \\\$\$(\$(exe)_OBJS:=.cmo)\\n\" >> \$@\$(\n))"
   echo
   echo "ifneq (\$(filter-out clean depend \$(DEPEND_DEPEND_NAMES),\$(MAKECMDGOALS)),)"
   echo "  include .depend"
   echo "  include .objs"
   echo "endif"
   echo
   echo "clean-exe:"
   echo "	\$(RM) *.out *.opt \$(ALL_EXE) \$(EVERYTHING_EXE)"
   echo
   echo "clean: clean-tmp clean-comp clean-exe clean-depend"
   echo
   echo "endif"
   echo
   echo "clean-comp:"
   echo "	\$(RM) *.cm[oixa] *.cmxa *.o *.pp[oi] *.annot"
   echo
   echo "clean-depend":
   echo "	\$(RM) .depend .objs"
   echo
   echo "clean-tmp:"
   echo "	\$(RM) *~ .#*"
   echo
   echo "%.cmi: %.mli"
   echo "	@\$(TEST_DIR)"
   echo "	@\$(CAMLP5_COMM) \$(CAMLP5F) \$< -o \$*.ppi"
   echo "	\$(OCAMLC) \$(OCAMLI) -I \$(CAMLP5D) -c -intf \$*.ppi"
   echo "	\$(RM) \$*.ppi"
   echo
   echo "%.cmo: %.ml"
   echo "	@\$(TEST_DIR)"
   echo "	@\$(CAMLP5_COMM) \$(CAMLP5F) \$< -o \$*.ppo"
   echo "	\$(OCAMLC) \$(OCAMLI) -I \$(CAMLP5D) -c -impl \$*.ppo"
   echo "	\$(RM) \$*.ppo"
   echo
   echo "%.cmx: %.ml"
   echo "	@\$(TEST_DIR)"
   echo "	@\$(CAMLP5_COMM) \$(CAMLP5F) \$< -o \$*.ppo"
   echo "	\$(OCAMLOPT) \$(OCAMLI) -I \$(CAMLP5D) -c -impl \$*.ppo"
   echo "	\$(RM) \$*.ppo"
}

print_makefile() {
  (print_common_header
   print_tools
   print_compiler
   print_common_target
  ) > $MAKEFILE
}

# main

echo -e "\\x1b[36m=-=-\\x1b[0m Configure GeneWeb \\x1b[36m\
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\x1b[0m"

if $INTERACTIVE; then
  echo "Specify the build directory (default = ${BUILD_DIR})"
  read -re answer
  if [[ -n $answer ]]; then
    BUILD_DIR="${answer}"
  fi
  echo "Do you want to build the API (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    API=true
  fi
  if $API; then
    while [ -z "$LREDIS" ]; do
      echo "Please provide the path of your redis"
      read -re answer
      LREDIS="${answer}"
      if ! check_redis_path; then
        echo "Invalid redis path!"
        LREDIS=
      fi
    done
  fi
  echo "Do you want to remove compilation warnings (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    WARN=
  fi
  echo "Do you want compilation debugging symbols (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    DEBUG="-g -annot"
  fi
  echo "Do you want to statically link libraries (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    STATIC=true
  fi
fi
# Check the environment
check_environment
# Print Makefile
print_makefile
